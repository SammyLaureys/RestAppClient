{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","books","setBooks","isLoading","setIsLoading","location","process","useEffect","a","console","log","fetch","response","json","body","JSON","stringify","getBooks","className","map","b","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAiCeA,MA9Bf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEqBF,oBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,KAGPC,EAAWC,8CAmBjB,OAjBAC,qBAAU,WAAK,4CACb,8BAAAC,EAAA,6DACEC,QAAQC,IAAI,0BACZN,GAAa,GAFf,SAGyBO,MAAMN,GAH/B,cAGQO,EAHR,gBAIqBA,EAASC,OAJ9B,OAIQC,EAJR,OAKEL,QAAQC,IAAR,6CAAkDK,KAAKC,UAAUF,KACjEL,QAAQC,IAAII,GACZZ,EAASY,GACTV,GAAa,GACbK,QAAQC,IAAI,yBATd,6CADa,uBAAC,WAAD,wBAYbO,GACAR,QAAQC,IAAI,kCACZD,QAAQC,IAAI,qBACZ,IAGA,sBAAKQ,UAAW,MAAhB,YACGf,GAAY,gDACZF,EAAMkB,KAAI,SAACC,GAAD,OAAO,4BAAkBA,EAAEC,OAAZD,EAAEC,cChBnBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fdb1d5c1.chunk.js","sourcesContent":["import './App.css';\nimport React, {useEffect, useState} from \"react\";\n\nfunction App() {\n  const [books, setBooks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = process.env.REACT_APP_CONNECTION_LOCATION;\n\n  useEffect(()=> {\n    async function getBooks() {\n      console.log(\" async getBooks: start\");\n      setIsLoading(true);\n      const response = await fetch(location);\n      const body = await response.json();\n      console.log(` async getBooks: received response ${JSON.stringify(body)}`);\n      console.log(body);\n      setBooks(body);\n      setIsLoading(false);\n      console.log(\" async getBooks: done\");\n    }\n    getBooks();\n    console.log(\"useEffect: back after getBooks\");\n    console.log(\"useEffect: done\");\n  },[]);\n\n  return (\n    <div className={\"App\"}>\n      {isLoading ? <p>LOADING DATA!!!</p> : false}\n      {books.map((b) => <p key={b.title}>{b.title}</p>)}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}