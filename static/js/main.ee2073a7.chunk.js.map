{"version":3,"sources":["components/form.js","App.js","reportWebVitals.js","index.js"],"names":["TitleDiv","styled","div","AuthorDiv","StyledHeader","h2","ButtonDiv","Form","props","addBook","useState","title","setTitle","author","setAuthor","book","a","fetchOptions","method","headers","body","JSON","stringify","fetch","process","response","json","value","onChange","e","target","onClick","createBook","StyledForm","App","books","setBooks","isLoading","setIsLoading","location","deleteBook","id","filter","useEffect","getBooks","className","map","b","removeBook","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"usBAGA,IAAMA,EAAWC,IAAOC,IAAV,KAKRC,EAAYF,IAAOC,IAAV,KAKTE,EAAeH,IAAOI,GAAV,KAGZC,EAAYL,IAAOC,IAAV,KAyCAK,MAnCf,SAAcC,GAAO,IACVC,EAAWD,EAAXC,QADS,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGYF,mBAAS,IAHrB,mBAGTG,EAHS,KAGDC,EAHC,iDAIhB,WAA0BC,GAA1B,mBAAAC,EAAA,6DACUC,EAAe,CACjBC,OAAQ,OACRC,QAAS,CACL,eAAgB,kCAEpBC,KAAMC,KAAKC,UAAUP,IAN7B,SAQ2BQ,MAAM,GAAD,OAAIC,+CAA4CP,GARhF,cAQUQ,EARV,gBASuBA,EAASC,OAThC,OASUN,EATV,OAUIX,EAAQW,GAVZ,4CAJgB,sBAiBhB,OAAO,qCACC,cAAChB,EAAD,gCACA,eAACJ,EAAD,WACI,2CACA,uBAAO2B,MAAOhB,EAAOiB,SAAU,SAACC,GAAD,OAAOjB,EAASiB,EAAEC,OAAOH,aAE5D,eAACxB,EAAD,WACI,4CACA,uBAAOwB,MAAOd,EAAQe,SAAU,SAACC,GAAD,OAAOf,EAAUe,EAAEC,OAAOH,aAE9D,uBACA,cAACrB,EAAD,UACI,wBAAQyB,QAAS,kBA7Bb,2CA6BmBC,CAAW,CAACrB,QAAME,YAAzC,uB,iUC9ChB,IAAMoB,EAAahC,IAAOC,IAAV,KA+DDgC,MAlDf,WAAgB,IAAD,EACexB,mBAAS,IADxB,mBACJyB,EADI,KACGC,EADH,OAEuB1B,oBAAS,GAFhC,mBAEJ2B,EAFI,KAEOC,EAFP,KAGLC,EAAWf,8CAMjB,SAASgB,EAAWC,GAChBL,EAASD,EAAMO,QAAO,SAAA3B,GAAI,OAAIA,EAAK0B,KAAOA,MAVnC,4CAaX,WAA0B1B,GAA1B,iBAAAC,EAAA,6DACUC,EAAe,CACjBC,OAAQ,SACRC,QAAS,CACL,eAAgB,kCAEpBC,KAAMC,KAAKC,UAAUP,IAN7B,SAQ2BQ,MAAM,GAAD,OAAIC,+CAA4CP,GARhF,cAQUQ,EARV,gBASuBA,EAASC,OAThC,OAUIc,EAVJ,oDAbW,sBAsCX,OAZAG,qBAAU,WAAM,4CACZ,8BAAA3B,EAAA,6DACIsB,GAAa,GADjB,SAE2Bf,MAAMgB,GAFjC,cAEUd,EAFV,gBAGuBA,EAASC,OAHhC,OAGUN,EAHV,OAIIgB,EAAShB,GACTkB,GAAa,GALjB,4CADY,uBAAC,WAAD,wBASZM,KACD,IAEK,sBAAKC,UAAW,aAAhB,UACA,sBAAKA,UAAW,MAAhB,YACKR,GAAY,gDACZF,EAAMW,KAAI,SAACC,GAAD,OAAO,8BAAkBA,EAAEpC,MAApB,MAA8BoC,EAAElC,OAAhC,IAAwC,wBAAQkB,QAAS,kBAzC5E,2CAyCkFiB,IAAvB,sBAAhCD,EAAEpC,aAEhC,cAACsB,EAAD,UACI,cAAC,EAAD,CAAMxB,QAvClB,SAAiBM,GACbqB,EAAS,GAAD,mBAAKD,GAAL,CAAYpB,cCZbkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ee2073a7.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TitleDiv = styled.div`\r\n   float: left;\r\n   margin-left: 25%;\r\n`;\r\n\r\nconst AuthorDiv = styled.div`\r\n  float: right;\r\n  margin-right: 25%;\r\n`;\r\n\r\nconst StyledHeader = styled.h2`\r\n   margin-left: 40%;\r\n`;\r\nconst ButtonDiv = styled.div`\r\n   width: 100%;\r\n   margin-top: 2%;\r\n   margin-left: 48%;\r\n`;\r\n\r\nfunction Form(props){\r\n    const {addBook} = props;\r\n    const [title, setTitle] = useState(\"\");\r\n    const [author, setAuthor] = useState(\"\");\r\n    async function createBook(book){\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify(book)\r\n        };\r\n        const response = await fetch(`${process.env.REACT_APP_CONNECTION_LOCATION}`,fetchOptions);\r\n        const body = await response.json();\r\n        addBook(body);\r\n    }\r\n\r\n    return(<>\r\n            <StyledHeader>Create a new book</StyledHeader>\r\n            <TitleDiv>\r\n                <label>title:</label>\r\n                <input value={title} onChange={(e) => setTitle(e.target.value)}/>\r\n            </TitleDiv>\r\n            <AuthorDiv>\r\n                <label>author:</label>\r\n                <input value={author} onChange={(e) => setAuthor(e.target.value)}/>\r\n            </AuthorDiv>\r\n            <br/>\r\n            <ButtonDiv>\r\n                <button onClick={() => createBook({title,author})}>add</button>\r\n            </ButtonDiv>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form;","import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport Form from \"./components/form\";\nimport styled from \"styled-components\"\n\nconst StyledForm = styled.div`\n  width: 50%;\n  border: 1px solid black;\n  margin-top: 5%;\n  margin-left: 24%;\n  margin-right: 20%;\n  padding-top: 1%;\n  padding-bottom: 1%;\n  background-color: #08AEEA;\n  background-image: linear-gradient(0deg, #08AEEA 0%, #2AF598 100%);\n\n`;\n\nfunction App() {\n    const [books, setBooks] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const location = process.env.REACT_APP_CONNECTION_LOCATION;\n\n    function addBook(book){\n        setBooks([...books, book]);\n    }\n\n    function deleteBook(id){\n        setBooks(books.filter(book => book.id !== id));\n    }\n\n    async function removeBook(book){\n        const fetchOptions = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json;charset=utf-8'\n            },\n            body: JSON.stringify(book)\n        };\n        const response = await fetch(`${process.env.REACT_APP_CONNECTION_LOCATION}`,fetchOptions);\n        const body = await response.json();\n        deleteBook(body);\n    }\n\n    useEffect(() => {\n        async function getBooks() {\n            setIsLoading(true);\n            const response = await fetch(location);\n            const body = await response.json();\n            setBooks(body);\n            setIsLoading(false);\n        }\n\n        getBooks();\n    }, []);\n\n    return (<div className={\"backGround\"}>\n            <div className={\"App\"}>\n                {isLoading ? <p>LOADING DATA!!!</p> : false}\n                {books.map((b) => <p key={b.title}>{b.title} - {b.author} <button onClick={() => removeBook()}>delete</button></p>)}\n            </div>\n            <StyledForm>\n                <Form addBook={addBook}/>\n            </StyledForm>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}