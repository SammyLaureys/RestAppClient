{"version":3,"sources":["components/createform.js","components/editform.js","App.js","reportWebVitals.js","index.js"],"names":["CreateForm","props","setIsLoading","setError","addBook","useState","title","setTitle","author","setAuthor","book","a","console","log","fetchOptions","method","headers","body","JSON","stringify","fetch","process","response","json","ok","status","error","message","className","value","onChange","e","target","onClick","createBook","EditForm","selectedBook","setSelectedBook","updateBook","id","editBook","App","books","setBooks","isLoading","useEffect","getBooks","style","background","color","map","b","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fafd444.chunk.js","sourcesContent":["import {useState} from \"react\";\n\nexport function CreateForm(props) {\n    const {setIsLoading, setError, addBook} = props;\n    const [title, setTitle] = useState(\"\");\n    const [author, setAuthor] = useState(\"\");\n\n    async function createBook(book) {\n        console.log(\"async createBook\");\n        setIsLoading(true);\n        setError(false);\n\n        const fetchOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json;charset=utf-8'},\n            body: JSON.stringify(book)\n        };\n        const response = await fetch(`${process.env.REACT_APP_CONNECTION_LOCATION}`, fetchOptions);\n        const body = await response.json();\n        if(response.ok){\n            console.log(`   async createBook: received response ${JSON.stringify(body)}`);\n            addBook(body);\n            console.log(\"   async createBook: done\");\n        } else {\n            console.log(`   async createBook: ERROR: ${response.status} - ${body.error} - ${body.message}`);\n            setIsLoading(false);\n            setError(true);\n        }\n        setIsLoading(false);\n    }\n\n    return <div className=\"editbox\">\n        <div className=\"editboxrow\">\n            <label>title: </label>\n            <input value={title} onChange={(e) => setTitle(e.target.value)}/>\n        </div>\n        <div className=\"editboxrow\">\n            <label>author: </label>\n            <input value={author} onChange={(e) => setAuthor(e.target.value)}/>\n        </div>\n        <div className=\"editboxbuttonrow\">\n            <button onClick={() => createBook({title, author})}>create</button>\n        </div>\n    </div>;\n}","/** @return {null} */\nexport function EditForm(props) {\n    const {selectedBook, setSelectedBook, setIsLoading, updateBook, setError} = props;\n\n    if (!selectedBook) return null;\n\n    async function editBook(book) {\n        if (!selectedBook) return;\n        console.log(\"async editBook\");\n        setIsLoading(true);\n        setError(false);\n\n        const fetchOptions = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json;charset=utf-8'},\n            body: JSON.stringify(book)\n        };\n        const response = await fetch(`${process.env.REACT_APP_CONNECTION_LOCATION}/${book.id}`, fetchOptions);\n        const body = await response.json();\n        if(response.ok){\n            console.log(`   async editBook: received response ${JSON.stringify(body)}`);\n            updateBook(body);\n            console.log(\"   async editBook: done\");\n        } else {\n            console.log(`   async createBook: ERROR: ${response.status} - ${body.error} - ${body.message}`);\n            setIsLoading(false);\n            setError(true);\n        }\n\n        setIsLoading(false);\n    }\n\n    return <>\n        <div className=\"overlay\" onClick={() => setSelectedBook()}/>\n        <div className=\"editbox modal\">\n            <div className=\"editboxrow\">\n                <label>title: </label>\n                <input value={selectedBook.title}\n                       onChange={(e) => setSelectedBook({...selectedBook, title: e.target.value})}/>\n            </div>\n            <div className=\"editboxrow\">\n                <label>author: </label>\n                <input value={selectedBook.author}\n                       onChange={(e) => setSelectedBook({...selectedBook, author: e.target.value})}/>\n            </div>\n            <div className=\"editboxbuttonrow\">\n                <button onClick={() => setSelectedBook()}>cancel</button>\n                <button onClick={() => editBook(selectedBook)}>save</button>\n            </div>\n        </div>\n    </>;\n}","import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport {CreateForm} from \"./components/createform\";\nimport {EditForm} from \"./components/editform\";\n\nfunction App() {\n    const [books, setBooks] = useState([]);\n    const [selectedBook, setSelectedBook] = useState();\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState();\n\n    console.log(\"render App()\");\n\n    function addBook(book) {\n        setBooks([...books, book]);\n    }\n\n    function updateBook(book) {\n        setBooks(books.map((b) => b.id === book.id ? book : b));\n    }\n\n    useEffect(() => {\n        console.log(\"useEffect: start\");\n\n        async function getBooks() {\n            console.log(\"   async getBooks: start\");\n            setIsLoading(true);\n            const response = await fetch(`${process.env.REACT_APP_CONNECTION_LOCATION}`);\n            const body = await response.json();\n            console.log(`   async getBooks: received response ${JSON.stringify(body)}`);\n            setBooks(body);\n            console.log(\"   async getBooks: done\");\n            setIsLoading(false);\n        }\n\n        getBooks();\n        console.log(\"useEffect: back after getBooks\");\n        console.log(\"useEffect: done\");\n    }, []);\n\n    return (\n        <div className=\"App\">\n            {isLoading ? <p style={{background: \"orange\", color: \"black\"}}>LOADING DATA!!!</p> : false}\n            {error ? <p style={{background: \"orange\", color: \"black\"}}>SOMETHING WENT WRONG!!!</p> : false}\n            {books.map((b) => <p key={b.title} onClick={() => setSelectedBook({...b})}>{b.title} - {b.author}</p>)}\n            <CreateForm selectedBook={selectedBook} setIsLoading={setIsLoading} setError={setError} addBook={addBook}/>\n            <EditForm selectedBook={selectedBook} setSelectedBook={setSelectedBook} setIsLoading={setIsLoading} setError={setError}\n                      updateBook={updateBook}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}